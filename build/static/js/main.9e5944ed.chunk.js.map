{"version":3,"sources":["components/images/Rick_and_Morty_logo.png","components/Nav.js","components/Home.js","components/CharacterCard.js","components/CharacterList.js","components/LocationCard.js","components/LocationList.js","components/EpisodeCard.js","components/EpisodeList.js","App.js","serviceWorker.js","index.js"],"names":["Nav","class","to","src","Rick_and_Morty_logo","alt","className","Home","CharacterCard","props","chars","image","name","species","gender","status","CharacterList","goToNextPage","fetch","state","nextPage","then","response","json","data","console","log","setState","characterData","results","info","next","this","cards","i","length","push","onClick","React","Component","LocationCard","locat","type","dimension","LocationList","useState","GetLocationList","useEffect","axios","get","map","id","EpisodeCard","episo","air_date","episode","EpisodeList","GetEpisodeList","App","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"mQAAe,MAA0B,gDCqB1BA,MAhBd,WACG,OACJ,mCACA,cAAC,IAAD,IACQ,gCACI,qBAAKC,MAAM,OAAX,SAAkB,cAAC,IAAD,CAAMC,GAAG,OAAT,SAAgB,qBAAKC,IAAKC,EAAqBC,IAAI,4BACrE,qBAAIC,UAAU,YAAd,UACA,6BAAI,cAAC,IAAD,CAAMJ,GAAG,aAAT,SAAsB,gDAC1B,6BAAI,cAAC,IAAD,CAAMA,GAAG,YAAT,SAAqB,+CACzB,6BAAI,cAAC,IAAD,CAAMA,GAAG,WAAT,SAAoB,wDCHrBK,MATf,WAEI,OACA,yBAASD,UAAU,OAAnB,SACA,iCAAQ,wE,sCCUGE,MAbf,SAAuBC,GACnB,OAEJ,sBAAKH,UAAU,iBAAf,UACE,qBAAKH,IAAKM,EAAMC,MAAMC,MAAON,IAAI,mBAC/B,wCAAWI,EAAMC,MAAME,KAAvB,OACA,2CAAcH,EAAMC,MAAMG,QAA1B,OACA,0CAAaJ,EAAMC,MAAMI,UACzB,0CAAaL,EAAMC,MAAMK,cC4CdC,E,kDAtCX,WAAYP,GAAQ,IAAD,8BACf,cAAMA,IASVQ,aAAe,WACXC,MAAM,EAAKC,MAAMC,UAAUC,MAAK,SAAAC,GAC5BA,EAASC,OAAOF,MAAK,SAAAG,GACjBC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CAAEC,cAAeJ,EAAKK,QAAST,SAAUI,EAAKM,KAAKC,cAXzE,EAAKZ,MAAQ,CAAES,cAAe,GAAIR,SAAU,6CAH7B,E,gEAOfY,KAAKf,iB,+BAeL,IAFA,IAAIgB,EAAQ,GAEHC,EAAI,EAAGA,EAAIF,KAAKb,MAAMS,cAAcO,OAAQD,IACjDD,EAAMG,KAAK,cAAC,EAAD,CAAe1B,MAAOsB,KAAKb,MAAMS,cAAcM,MAG9D,OACI,0BAAS5B,UAAU,iBAAnB,UACI,iCAAQ,gFACR,wBAAQ+B,QAASL,KAAKf,aAAtB,kBACA,qBAAKhB,MAAM,iBAAX,SACMgC,W,GA5CMK,IAAMC,W,yBCSnBC,MAVf,SAAsB/B,GAClB,OACJ,sBAAKH,UAAU,gBAAf,UACI,wCAAWG,EAAMgC,MAAM7B,KAAvB,OACA,wCAAWH,EAAMgC,MAAMC,KAAvB,OACA,6CAAgBjC,EAAMgC,MAAME,UAA5B,WCsBWC,MAzBf,WAAyB,IAAD,EACoBC,mBAAS,IAD7B,mBACbD,EADa,KACCE,EADD,KAYpB,OATAC,qBAAU,WACNC,IACCC,IAAI,6CACJ5B,MAAK,SAAAC,GACFwB,EAAgBxB,EAASE,KAAKK,SAC9BJ,QAAQC,IAAIJ,QAEjB,IAGH,0BAAShB,UAAU,gBAAnB,UACI,iCAAQ,+EACR,qBAAKL,MAAM,iBAAX,SAA6B2C,EAAaM,KAAI,SAACT,EAAOU,GAClD,OAAO,cAAC,EAAD,CAAuBV,MAAOA,GAAXU,YCRvBC,MAVf,SAAqB3C,GACjB,OACJ,sBAAKH,UAAU,eAAf,UACI,iDAAoBG,EAAM4C,MAAMzC,KAAhC,OACA,4CAAeH,EAAM4C,MAAMC,SAA3B,OACA,gDAAmB7C,EAAM4C,MAAME,QAA/B,WCqBWC,MAxBf,WAAwB,IAAD,EACmBX,mBAAS,IAD5B,mBACZW,EADY,KACCC,EADD,KAYnB,OATAV,qBAAU,WACNC,IACCC,IAAI,4CACJ5B,MAAK,SAAAC,GACFmC,EAAenC,EAASE,KAAKK,SAC7BJ,QAAQC,IAAIJ,QAEjB,IAGH,0BAAShB,UAAU,eAAnB,UACI,iCAAQ,8EACR,qBAAKL,MAAM,iBAAX,SAA6BuD,EAAYN,KAAI,SAACG,EAAOF,GACjD,OAAO,cAAC,EAAD,CAAsBE,MAAOA,GAAXF,Y,aCOtBO,MAnBf,WACI,OACA,cAAC,IAAD,UACI,sBAAKpD,UAAU,MAAf,UACA,cAAC,EAAD,IACA,iCACA,cAAC,IAAD,CAAOqD,KAAK,QAAQC,UAAWrD,IAC/B,cAAC,IAAD,CAAOoD,KAAK,cAAcC,UAAW5C,IACrC,cAAC,IAAD,CAAO2C,KAAK,aAAaC,UAAWhB,IACpC,cAAC,IAAD,CAAOe,KAAK,YAAYC,UAAWJ,OAE3C,cAAC,IAAD,CAAOK,OAAK,EAACF,KAAK,IAAlB,SACI,cAAC,IAAD,CAAUzD,GAAG,kBCrBG4D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCENC,IAASC,OACP,cAAC,IAAD,UACA,cAAC,IAAMC,WAAP,UACA,cAAC,EAAD,QAGAC,SAASC,eAAe,SDyGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrD,MAAK,SAAAsD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrD,QAAQqD,MAAMA,EAAMC,c","file":"static/js/main.9e5944ed.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Rick_and_Morty_logo.42c8df0b.png\";","import '../styles/navstyle.css';\r\nimport { BrowserRouter as Router, Link } from 'react-router-dom';\r\nimport React from 'react';\r\nimport Rick_and_Morty_logo from \"./images/Rick_and_Morty_logo.png\";\r\n\r\n function Nav(){\r\n    return (\r\n<router>\r\n<Router></Router>\r\n        <nav>\r\n            <div class=\"logo\"><Link to=\"home\"><img src={Rick_and_Morty_logo} alt=\"rick and morty logo\"/></Link></div>\r\n            <ul className=\"nav_links\">\r\n            <li><Link to=\"characters\"><h2>Characters</h2></Link></li>\r\n            <li><Link to=\"locations\"><h2>Locations</h2></Link></li>\r\n            <li><Link to=\"episodes\"><h2>Episodes</h2></Link></li>\r\n            </ul>\r\n        </nav>\r\n</router>\r\n    );\r\n}\r\n\r\nexport default Nav;","import React from \"react\";\r\n\r\nfunction Home() {\r\n   \r\n    return(\r\n    <section className=\"Home\">\r\n    <center><h1>Welcome to the Rick and Morty Api</h1></center>\r\n    </section>\r\n    );\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport '../styles/cardstyle.css';\r\n\r\nfunction CharacterCard(props){\r\n    return (\r\n\r\n<div className=\"character_card\">\r\n  <img src={props.chars.image} alt=\"rick and morty\"/>\r\n    <h1>Name: {props.chars.name} </h1>\r\n    <h1>Species: {props.chars.species} </h1>\r\n    <h1>Gender: {props.chars.gender}</h1>\r\n    <h1>Status: {props.chars.status}</h1>\r\n</div>\r\n    );\r\n}\r\n\r\nexport default CharacterCard;","import '../styles/cardstyle.css';\r\nimport React from \"react\";\r\nimport CharacterCard from \"./CharacterCard\";\r\n\r\nclass CharacterList extends React.Component {\r\n    //const[CharacterList, GetCharacterList] = useState([]);\r\n\r\n    //    var next = 1;\r\n    //useEffect(() => {\r\n    //    axios\r\n    //        .get(`https://rickandmortyapi.com/api/character/?page=${next}`)\r\n    //        .then(response => {\r\n    //            GetCharacterList(response.data.results);\r\n    //            console.log(response)\r\n    //        })\r\n    //}, []);\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { characterData: {}, nextPage: 'https://rickandmortyapi.com/api/character' };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.goToNextPage();\r\n    }\r\n\r\n    goToNextPage = () => {\r\n        fetch(this.state.nextPage).then(response => {\r\n            response.json().then(data => {\r\n                console.log(data);\r\n                this.setState({ characterData: data.results, nextPage: data.info.next });\r\n            });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let cards = [];\r\n\r\n        for (let i = 0; i < this.state.characterData.length; i++) {\r\n            cards.push(<CharacterCard chars={this.state.characterData[i]}></CharacterCard>);\r\n        }\r\n\r\n        return (\r\n            <section className=\"character-list\">\r\n                <center><h2>Welcome to the Rick and Morty character page</h2></center>\r\n                <button onClick={this.goToNextPage}>Next</button>\r\n                <div class=\"card_container\">\r\n                    { cards }\r\n                </div>\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CharacterList;","import React from 'react';\r\nimport '../styles/cardstyle.css';\r\n\r\nfunction LocationCard(props){\r\n    return (\r\n<div className=\"location_card\">\r\n    <h1>Name: {props.locat.name} </h1>\r\n    <h1>Type: {props.locat.type} </h1>\r\n    <h1>Dimension: {props.locat.dimension} </h1>\r\n</div>\r\n    );\r\n}\r\n\r\nexport default LocationCard;","import '../styles/cardstyle.css';\r\nimport React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport LocationCard from \"./LocationCard\";\r\n\r\nfunction LocationList() {\r\n    const [LocationList, GetLocationList] = useState([]);\r\n\r\n    useEffect(() => {\r\n        axios\r\n        .get(\"https://rickandmortyapi.com/api/location/\")\r\n        .then(response => {\r\n            GetLocationList(response.data.results);\r\n            console.log(response)\r\n        })\r\n    }, []);\r\n\r\n    return(\r\n    <section className=\"location-list\">\r\n        <center><h2>Welcome to the Rick and Morty location page</h2></center>\r\n        <div class=\"card_container\">{LocationList.map((locat, id) => {\r\n            return <LocationCard key={id} locat={locat} />;\r\n        \r\n        })}</div>\r\n    </section>\r\n    );\r\n\r\n\r\n}\r\n\r\nexport default LocationList;","import React from 'react';\r\nimport '../styles/cardstyle.css';\r\n\r\nfunction EpisodeCard(props){\r\n    return (\r\n<div className=\"episode_card\">\r\n    <h1>Episode title: {props.episo.name} </h1>\r\n    <h1>Air date: {props.episo.air_date} </h1>\r\n    <h1>Episode code: {props.episo.episode} </h1>\r\n</div>\r\n    );\r\n}\r\n\r\nexport default EpisodeCard;","import '../styles/cardstyle.css';\r\nimport React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport EpisodeCard from \"./EpisodeCard\";\r\n\r\nfunction EpisodeList() {\r\n    const [EpisodeList, GetEpisodeList] = useState([]);\r\n\r\n    useEffect(() => {\r\n        axios\r\n        .get(\"https://rickandmortyapi.com/api/episode/\")\r\n        .then(response => {\r\n            GetEpisodeList(response.data.results);\r\n            console.log(response)\r\n        })\r\n    }, []);\r\n\r\n    return(\r\n    <section className=\"Episode-list\">\r\n        <center><h2>Welcome to the Rick and Morty Episode page</h2></center>\r\n        <div class=\"card_container\">{EpisodeList.map((episo, id) => {\r\n            return <EpisodeCard key={id} episo={episo} />;\r\n        \r\n        })}</div>\r\n    </section>\r\n    );\r\n\r\n\r\n}\r\nexport default EpisodeList;","import React from 'react';\r\nimport Nav from \"./components/Nav\";\r\nimport Home from \"./components/Home\";\r\nimport CharacterList from \"./components/CharacterList\";\r\nimport LocationList from \"./components/LocationList\";\r\nimport EpisodeList from \"./components/EpisodeList\";\r\nimport { BrowserRouter as Router, Route, Redirect } from 'react-router-dom';\r\nimport './styles/backgroundstyle.css';\r\n\r\nfunction App() {\r\n    return (\r\n    <Router>\r\n        <div className=\"App\">\r\n        <Nav />\r\n        <body>\r\n        <Route path=\"/home\" component={Home} />\r\n        <Route path=\"/characters\" component={CharacterList} />\r\n        <Route path=\"/Locations\" component={LocationList} />\r\n        <Route path=\"/episodes\" component={EpisodeList} />\r\n        </body>\r\n<Route exact path=\"/\">\r\n    <Redirect to=\"/home\" />\r\n</Route>\r\n    </div>\r\n    </Router>\r\n    );\r\n}\r\n\r\nexport default App;","const isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {BrowserRouter as Route } from 'react-router-dom';\r\n\r\n\r\nReactDOM.render(\r\n  <Route>\r\n  <React.StrictMode>\r\n  <App />\r\n  </React.StrictMode>\r\n  </Route>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}